name: Build and Publish Docker Image

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      buildWithWarnings:
        description: 'Build with warnings enabled'
        required: false
        default: 'false'
        type: boolean

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: |
          # Set CI=false to prevent treating warnings as errors
          export CI=false
          npm run build

      - name: Generate version number
        id: versioning
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version || '1.0.0'")
          echo "Current version: $CURRENT_VERSION"
          
          # Calculate new version based on commit count since last tag
          COMMIT_COUNT=$(git rev-list --count HEAD)
          BUILD_NUMBER=${GITHUB_RUN_NUMBER:-1}
          
          # Extract major.minor from current version and add build number
          BASE_VERSION=$(echo $CURRENT_VERSION | grep -oE "^[0-9]+\.[0-9]+")
          NEW_VERSION="${BASE_VERSION:-1.0}.${COMMIT_COUNT:-0}"
          
          echo "Generated version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            roeilevinson/tradevis-frontend:latest
            roeilevinson/tradevis-frontend:v${{ steps.versioning.outputs.version }}
          cache-from: type=registry,ref=roeilevinson/tradevis-frontend:latest
          cache-to: type=inline
          build-args: |
            WARNINGS_ENABLED=${{ github.event.inputs.buildWithWarnings == 'true' && 'true' || 'false' }}
      
      - name: Checkout App Repository
        if: github.event_name != 'pull_request'
        uses: actions/checkout@v3
        with:
          repository: tradevisapp/app
          path: app-repo
          token: ${{ secrets.GH_PAT }}
          
      - name: Update Helm Chart Values
        if: github.event_name != 'pull_request'
        run: |
          # Verify the directory structure
          find app-repo -type d | sort
          
          # Correct path to the values.yaml file
          VALUES_FILE="app-repo/charts/app/values.yaml"
          
          # Check if the file exists
          if [ ! -f "$VALUES_FILE" ]; then
            echo "Error: values.yaml not found at path: $VALUES_FILE"
            echo "Contents of charts directory:"
            find app-repo/charts -type f | sort
            exit 1
          fi
          
          # Update the image.tag in values.yaml
          VERSION="v${{ steps.versioning.outputs.version }}"
          
          # Use yq if available, otherwise use sed
          if command -v yq &> /dev/null; then
            yq eval '.deployment.image.tag = "'$VERSION'"' -i "$VALUES_FILE"
          else
            # Backup original file
            cp "$VALUES_FILE" "$VALUES_FILE.bak"
            
            # Use sed to replace the image tag value
            sed -i 's/tag: .*$/tag: "'$VERSION'"/' "$VALUES_FILE"
            
            # Verify the change
            if ! grep -q "tag: \"$VERSION\"" "$VALUES_FILE"; then
              echo "Failed to update values.yaml"
              mv "$VALUES_FILE.bak" "$VALUES_FILE"
              exit 1
            fi
            
            # Remove backup
            rm "$VALUES_FILE.bak"
          fi
          
          # Display the changes
          echo "Updated Helm chart values.yaml with new image tag: $VERSION"
          echo "Changes made:"
          cat "$VALUES_FILE" | grep -A 3 "image:"
      
      - name: Commit and Push Changes
        if: github.event_name != 'pull_request'
        run: |
          cd app-repo
          
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          
          git add charts/app/values.yaml
          
          # Only commit if there are changes
          if git status | grep -q "Changes to be committed"; then
            git commit -m "Update frontend image to v${{ steps.versioning.outputs.version }}"
            
            # Debug output for diagnosis
            echo "Setting remote for pushing..."
            
            # Remove existing origin if it exists
            git remote remove origin || true
            
            # Add the remote with the token for authentication
            git remote add origin https://roeilevinson:${{ secrets.GH_PAT }}@github.com/tradevisapp/app.git
            
            # Debug remote URL (but hide the token)
            echo "Remote URL set. Pushing to origin main..."
            
            # Push changes to main branch explicitly
            git push origin main
            echo "Successfully updated Helm chart with new image version"
          else
            echo "No changes to commit"
          fi 